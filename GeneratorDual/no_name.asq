/***************************************/
/*  Use MADS http://mads.atari8.info/  */
/*  Mode: GED- (bitmap mode)           */
/***************************************/

	icl "no_name.h"
	icl "out_dual_A.opt.h"

USESPRITES = 1
 
BASE_ADDRESS equ $1000 + $1000 * (PIC_HEIGHT < 204)

	org $00

byt2	.ds 1

* ---	BASIC switch OFF
	org $2000\ mva #$ff portb\ rts\ ini $2000
	

; ANTIC A PROGRAM  
	org BASE_ADDRESS
ant_A:
	.print "Antic A addr: ",ant_A
	ANTIC_PROGRAM scr_A,ant_A
ant_A_end: 
	.print "Antic A size: ",*-ant_A
	.print "Antic A end: ",*

; MAIN code, still in first $400 of SPRITE A 
	.print "Main start: ", *
main
* ---	init PMG

	ift USESPRITES
	mva >pmg_A pmbase		;missiles and players data address
	mva #$03 pmcntl		;enable players and missiles
	eif

	lda:cmp:req $14		;wait 1 frame

	sei			;stop interrups
	mva #$00 nmien		;stop all interrupts
	mva #$fe portb		;switch off ROM to get 16k more ram
	
raster_program_end:
	; switch to frame A sprites
	ift USESPRITES
	mva >pmg_A pmbase		;missiles and players data address
	eif

	RASTER_PROGRAM_END_MACRO

; EXIT check
exit_check:

	lda trig0		; FIRE #0
	beq stop

	lda trig1		; FIRE #1
	beq stop

	lda consol		; START
	and #1
	beq stop

	lda skctl		; ANY KEY
	and #$04
	bne skp

stop	mva #$00 pmcntl		;PMG disabled
	tax
	sta:rne hposp0,x+

	mva #$ff portb		;ROM switch on
	mva #$40 nmien		;only NMI interrupts, DLI disabled
	cli			;IRQ enabled

	rts			;return to ... DOS
skp
	jmp LOOP

; Extra sync code

wait54cycle
	:2 inc byt2
wait44cycle
	inc byt3
	nop
wait36cycle
	inc byt3
	jsr _rts
wait18cycle
	inc byt3
_rts	rts

byt3	brk
	
	.print "Main code end: ", *
gap_used = *-ant_A
	.print "Gap in SPRITE A used: ", gap_used 
	
	IFT gap_used >= $400
		.error "Too much space tried to be used in SPRITE A gap: ", gap_used
	EIF

; SPRITES A	
	ift USESPRITES
	org BASE_ADDRESS
	.print "Sprites A: ",*
	.ds $300 ; needed for PMG in single line mode, we use it for Antic Program A + non-raster code
pmg_A SPRITES_A
	.print "Sprites A end: ",*
	eif

; ANTIC PROGRAM B
	org BASE_ADDRESS + $800	
ant_B:
	.print "Antic B addr: ",ant_B
	ANTIC_PROGRAM scr_B,ant_B
ant_B_end:
	.print "Antic B size: ",*-ant_B
	.print "Antic B end: ",*


; SPRITES B	
	ift USESPRITES
	org BASE_ADDRESS + $800
	.print "Sprites B: ",*	
	.ds $300 ; needed for PMG in single line mode, we use it for Antic Program B
pmg_B SPRITES_B
	.print "Sprites B end: ",*
	eif

	
; SCREEN A memory
	.align $1000
	org *+$10
	.print "Screen A start: ",*

	IFT PIC_HEIGHT>=204
scr_A	ins "out_dual_A.mic", 0, 8160
	:16 .byte 0
	ins "out_dual_A.mic" , +8160
	ELS
scr_A	ins "out_dual_A.mic"
	EIF

	.print "Screen A end: ",*

////////////////////
// RASTER PROGRAM //
////////////////////

LOOP	
	.print "Raster A addr: ", *

.local frame_A
	lda vcount		;synchronization for the first screen line
	cmp #$02
	bne frame_A

	mva #%00111110 dmactl	;set new screen width
	mva <ant_A dlptr
	mva >ant_A dlptr+1

  icl "out_dual_A.rp.ini"

;--- wait 18 cycles
	jsr _rts
	inc byt3

;--- set global offset (23 cycles)
	jsr _rts
	cmp byt3\ pha:pla

;--- empty line
	jsr wait54cycle
	inc byt2

  icl "out_dual_A.opt"

.endl

	; switch to frame B sprites
	ift USESPRITES
	mva >pmg_B pmbase		;missiles and players data address
	eif
	
	RASTER_PROGRAM_END_MACRO

.print "Raster A size: ", *-frame_A
.print "Raster B addr: ", *

.local frame_B
	lda vcount		;synchronization for the first screen line
	cmp #$02
	bne frame_B

	mva #%00111110 dmactl	;set new screen width
	mva <ant_B dlptr
	mva >ant_B dlptr+1

  icl "out_dual_B.rp.ini"

;--- wait 18 cycles
	jsr _rts
	inc byt3

;--- set global offset (23 cycles)
	jsr _rts
	cmp byt3\ pha:pla

;--- empty line
	jsr wait54cycle
	inc byt2

  icl "out_dual_B.opt"
.endl

.print "Raster B size: ", *-frame_B

	jmp raster_program_end
	
.print "End program addr: ", *

; SCREEN B memory
	.align $1000
	org *+$10
	.print "Screen B start: ",*
	IFT PIC_HEIGHT>=204
scr_B	ins "out_dual_B.mic", 0, 8160
	:16 .byte 0
	ins "out_dual_B.mic" , +8160
	ELS
scr_B	ins "out_dual_B.mic"
	EIF
	.print "Screen B end: ",*

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;---
	.MACRO RASTER_PROGRAM_END_MACRO
c0	lda #$00
	sta colbak
	sta color0
	sta color1
	sta color2
	sta color3
s0	lda #$03
	sta sizep0
	sta sizep1
	sta sizep2
	sta sizep3
	mva #$ff sizem
	sta grafm
	mva #$20 hposm0
	mva #$28 hposm1
	mva #$d0 hposm2
	mva #$d8 hposm3
	mva #$02 pmcntl
	lda #$14
	sta gtictl
	.ENDM


.MACRO	ANTIC_PROGRAM
	:+8 dta $4e,a(:1+$0000+#*40)
	:+8 dta $4e,a(:1+$0140+#*40)
	:+8 dta $4e,a(:1+$0280+#*40)
	:+8 dta $4e,a(:1+$03C0+#*40)
	:+8 dta $4e,a(:1+$0500+#*40)
	:+8 dta $4e,a(:1+$0640+#*40)
	:+8 dta $4e,a(:1+$0780+#*40)
	:+8 dta $4e,a(:1+$08C0+#*40)
	:+8 dta $4e,a(:1+$0A00+#*40)
	:+8 dta $4e,a(:1+$0B40+#*40)
	:+8 dta $4e,a(:1+$0C80+#*40)
	:+8 dta $4e,a(:1+$0DC0+#*40)
	:+8 dta $4e,a(:1+$0F00+#*40)
	:+8 dta $4e,a(:1+$1040+#*40)
	:+8 dta $4e,a(:1+$1180+#*40)
	:+8 dta $4e,a(:1+$12C0+#*40)
	:+8 dta $4e,a(:1+$1400+#*40)
	:+8 dta $4e,a(:1+$1540+#*40)
	:+8 dta $4e,a(:1+$1680+#*40)
	:+8 dta $4e,a(:1+$17C0+#*40)
	:+8 dta $4e,a(:1+$1900+#*40)
	:+8 dta $4e,a(:1+$1A40+#*40)
	:+8 dta $4e,a(:1+$1B80+#*40)
	:+8 dta $4e,a(:1+$1CC0+#*40)
	:+8 dta $4e,a(:1+$1E00+#*40)
	:+4 dta $4e,a(:1+$1F40+#*40)
	:+4 dta $4e,a(:1+$1FF0+#*40)
	:+8 dta $4e,a(:1+$2090+#*40)
	:+8 dta $4e,a(:1+$21D0+#*40)
	:+8 dta $4e,a(:1+$2310+#*40)
	:+8 dta $4e,a(:1+$2450+#*40)
	dta $41,a(:2)
.ENDM

// .MACRO	ANTIC_PROGRAM
// .rept 25
	// ?y=#
	// .rept 8
		// ?x=#
		// ?line_number=?y*8+?x
		// ift ?line_number<PIC_HEIGHT
			// dta $4e,a(:1+?y*8*40+?x*40)
		// eif
	// .endr
// .endr
	
// .rept 2
	// ?y=#
	// .rept 4
		// ?x=#
		// ?offset=25*8*40 ; 1F40
		// ?line_number=?y*4+?x + 25*8
		// ift ?line_number<PIC_HEIGHT
			// dta $4e,a(:1+?offset+?y*40*4+?x*40)
		// eif
	// .endr
// .endr

// .rept 4
	// ?y=#
	// .rept 8
		// ?x=#
		// ?offset=$2090
		// ?line_number=?y*8+?x + 25*8 + 4*2
		// ift ?line_number<PIC_HEIGHT
			// dta $4e,a(:1+?offset+?y*40*8+?x*40)
		// eif
	// .endr
// .endr

	// dta $41,a(:2)
// .ENDM


CL

;---
	run main
;---

	opt l-

.MACRO	SPRITES_A
	icl "out_dual_A.pmg"
.ENDM
.MACRO	SPRITES_B
	icl "out_dual_B.pmg"
.ENDM


